// ==Bookmarklet Script==
// @name         OpenPhone Gemini Summarizer (On-Demand Options)
// @description  Presents a modal with date and section options on-click, then generates a multimodal summary with a preview.
// @version      15.0
// @author       ilakskills
// ==/Bookmarklet Script==

(() => {
    // --- MASTER PROMPT & CONFIGURATION ---
    const PROMPT_SECTIONS = {
        title: `Title:\nDescribe the main meeting purpose or project discussed (e.g., "Project Alpha Kick-off", "Q3 Planning Session").\nDefault: If the purpose is unclear from the text, use "Interaction Summary - [Date]" (extract date from the log if possible, otherwise use current date).\n`,
        attendees: `Attendees:\nList names, inferred roles (e.g., Technician, Project Manager, Client), and companies/affiliations if identifiable.\nUse identifiers (like phone numbers) if names are unavailable.\nNote if someone was mentioned but their presence wasn't confirmed (e.g., "Jane Doe (mentioned, presence unconfirmed)").\n`,
        project_topic: `Project/Topic:\nClearly state the main project(s), work order(s), or central topic(s) of the conversation. Include relevant IDs (WO#, Ticket#, CID) if mentioned.\n`,
        discussion_points: `Content/Key Discussion Points:\nBulleted list summarizing the core substance of the conversation.\nFocus on updates provided, issues raised, problems discussed, information shared, questions asked, and context established.\nSynthesize related points, even if discussed at different times or in different interactions within the log.\n`,
        decisions: `Decisions Made:\nBulleted list of explicit agreements or conclusions reached during the interaction.\n`,
        action_items: `Follow-Up Tasks / Action Items:\nClear, actionable bullet points.\nAssign each task to a specific person/role (use name or identifier).\nInclude deadlines if mentioned.\nSpecify the action required (e.g., "Upload document," "Call client," "Investigate issue").\n`,
        notes: `Notes/Observations (Optional):\nInclude relevant observations about the interaction's tone (e.g., urgent, confused, positive), potential risks identified, unresolved questions, or general takeaways not fitting elsewhere.\n`,
        quick_summary: `Quick Summary: Sum it all up into 2 or 3 easy to understand sentances.\n`,
        quick_next_steps: `Quick Next Steps: Outline next steps in 2 or 3 easy to understand sentances.\n`,
        disclaimer: `Disclaimer:\n"Generated by AI. Please review for accuracy."\n`
    };
    const BASE_PROMPT_HEADER = `Goal:\nTransform a potentially messy conversation log...`; // Shortened for brevity
    const BASE_PROMPT_FOOTER = `? How I Work:\nSynthesize & Consolidate...`; // Shortened for brevity
    
    // --- SVG Icons ---
    const geminiIconSVG = `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><path fill="currentColor" d="M10 2.5a.75.75 0 0 1 .75.75V4a.75.75 0 0 1-1.5 0V3.25a.75.75 0 0 1 .75-.75zM10 16a.75.75 0 0 1 .75.75v1.25a.75.75 0 0 1-1.5 0V16.75a.75.75 0 0 1 .75-.75zM5.56 4.81a.75.75 0 0 1 1.06 0l.88.88a.75.75 0 0 1-1.06 1.06l-.88-.88a.75.75 0 0 1 0-1.06zM12.5 12.5a.75.75 0 0 1 1.06 0l.88.88a.75.75 0 0 1-1.06 1.06l-.88-.88a.75.75 0 0 1 0-1.06zM2 9.25a.75.75 0 0 1 .75.75v1.5a.75.75 0 0 1-1.5 0v-1.5A.75.75 0 0 1 2 9.25zm14.25.75a.75.75 0 0 0 1.5 0v-1.5a.75.75 0 0 0-1.5 0v1.5zM5.56 14.13a.75.75 0 0 1 0-1.06l.88-.88a.75.75 0 0 1 1.06 1.06l-.88.88a.75.75 0 0 1-1.06 0zM12.5 6.56a.75.75 0 0 1 0-1.06l.88-.88a.75.75 0 1 1 1.06 1.06l-.88.88a.75.75 0 0 1-1.06 0z"></path></svg>`;
    const settingsIconSVG = `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><path fill="currentColor" d="M10.667 1.875A.833.833 0 0 0 10 1.25a.833.833 0 0 0-.667.625l-.234.937a5.218 5.218 0 0 0-1.593.84l-.87-.39a.833.833 0 0 0-.933.277L4.29 5.293a.833.833 0 0 0 .278.933l.794.516a5.233 5.233 0 0 0 0 1.916l-.794.516a.833.833 0 0 0-.278.933l1.414 1.414a.833.833 0 0 0 .933.278l.87-.39c.47.318.99.577 1.592.839l.234.937A.833.833 0 0 0 10 18.75a.833.833 0 0 0 .667-.625l.234-.937c.603-.262 1.122-.521 1.593-.84l.87.39a.833.833 0 0 0 .933-.277l1.414-1.414a.833.833 0 0 0-.278-.933l-.794-.516a5.233 5.233 0 0 0 0-1.916l.794-.516a.833.833 0 0 0 .278-.933L15.707 3.88a.833.833 0 0 0-.933-.278l-.87.39a5.218 5.218 0 0 0-1.592-.84l-.234-.937zM10 12.5a2.5 2.5 0 1 1 0-5a2.5 2.5 0 0 1 0 5z"></path></svg>`;
    const loadingSpinnerSVG = `<svg width="20" height="20" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><style>.spinner_Gu6E{animation:spinner_gY4H 2s linear infinite}.spinner_gYuN{animation-delay:-.5s}.spinner_4j7o{animation-delay:-1s}.spinner_M323{animation-delay:-1.5s}@keyframes spinner_gY4H{0%,100%{r:1.5px}50%{r:3px}}</style><circle class="spinner_Gu6E" cx="12" cy="3" r="1.5" fill="currentColor"/><circle class="spinner_Gu6E spinner_gYuN" cx="12" cy="21" r="1.5" fill="currentColor"/><circle class="spinner_Gu6E spinner_4j7o" cx="3" cy="12" r="1.5" fill="currentColor"/><circle class="spinner_Gu6E spinner_M323" cx="21" cy="12" r="1.5" fill="currentColor"/></svg>`;
    const API_KEY_STORAGE_NAME = 'gemini_api_key_storage';

    // --- UI HELPER FUNCTIONS ---
    const injectStyles = () => { /* ... (Logic unchanged from v14) ... */ const e="gemini-summarizer-styles";if(document.getElementById(e))return;const t=document.createElement("style");t.id=e,t.innerHTML=`\n            .gemini-modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10000; display: flex; align-items: center; justify-content: center; }\n            .gemini-modal-content { background-color: #fff; border-radius: 8px; box-shadow: 0 4px 20px rgba(0,0,0,0.25); width: 90%; max-width: 800px; max-height: 90vh; display: flex; flex-direction: column; }\n            .gemini-modal-header { padding: 16px; border-bottom: 1px solid #e0e0e0; display: flex; justify-content: space-between; align-items: center; }\n            .gemini-modal-header h2 { margin: 0; font-size: 18px; color: #333; }\n            .gemini-modal-close { font-size: 24px; font-weight: bold; cursor: pointer; color: #888; border: none; background: none; }\n            .gemini-modal-body { padding: 16px; overflow-y: auto; white-space: pre-wrap; font-family: monospace; background-color: #f9f9f9; color: #222; line-height: 1.6; }\n            .gemini-modal-footer { padding: 12px 16px; border-top: 1px solid #e0e0e0; display: flex; gap: 10px; justify-content: flex-end; }\n            .gemini-modal-button { padding: 8px 16px; border-radius: 6px; border: 1px solid #ccc; background-color: #f0f0f0; cursor: pointer; font-weight: 500; }\n            .gemini-modal-button:hover { background-color: #e0e0e0; }\n            .gemini-modal-button.primary { background-color: #007bff; color: white; border-color: #007bff; }\n            .gemini-modal-button.primary:hover { background-color: #0056b3; }\n            .gemini-toast { position: fixed; top: 20px; right: 20px; background-color: #333; color: white; padding: 12px 20px; border-radius: 6px; z-index: 10001; font-size: 14px; transition: opacity 0.5s ease-in-out; }\n            .gemini-toast.success { background-color: #28a745; }\n            .gemini-toast.error { background-color: #dc3545; }\n            .options-modal .gemini-modal-body, .settings-modal .gemini-modal-body { font-family: sans-serif; white-space: normal; line-height: 1.5; background-color: #fff; }\n            .settings-section { margin-bottom: 20px; }\n            .settings-section h3 { margin-top: 0; margin-bottom: 10px; border-bottom: 1px solid #eee; padding-bottom: 5px; }\n            .settings-section label { display: block; margin-bottom: 5px; font-weight: bold; }\n            .settings-section input[type="text"], .settings-section input[type="date"] { width: 100%; padding: 8px; box-sizing: border-box; border: 1px solid #ccc; border-radius: 4px; }\n            .date-filters button { margin-right: 10px; }\n            .sections-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px; }\n            .sections-grid label { font-weight: normal; display: flex; align-items: center; }\n            .sections-grid input { margin-right: 8px; }\n        `,document.head.appendChild(t)};
    const showToast = (message, type = 'success') => { /* ... (Logic unchanged) ... */ const e=document.createElement("div");e.className=`gemini-toast ${type}`,e.textContent=message,document.body.appendChild(e),setTimeout(()=>{e.style.opacity="0",setTimeout(()=>e.remove(),500)},3e3)};
    const showSummaryModal = (summaryText, filename) => { /* ... (Logic unchanged) ... */ const e=document.createElement("div");e.className="gemini-modal-overlay",e.innerHTML=`\n            <div class="gemini-modal-content">\n                <div class="gemini-modal-header">\n                    <h2>AI Summary</h2>\n                    <button class="gemini-modal-close">×</button>\n                </div>\n                <div class="gemini-modal-body">${summaryText}</div>\n                <div class="gemini-modal-footer">\n                    <button class="gemini-modal-button download-btn">Download .txt</button>\n                    <button class="gemini-modal-button primary copy-btn">Copy to Clipboard</button>\n                </div>\n            </div>\n        `,document.body.appendChild(e);const t=()=>e.remove();e.querySelector(".gemini-modal-close").addEventListener("click",t),e.addEventListener("click",n=>{n.target===e&&t()}),e.querySelector(".copy-btn").addEventListener("click",()=>{navigator.clipboard.writeText(summaryText).then(()=>{showToast("Summary copied to clipboard!")}).catch(e=>{showToast("Failed to copy text.","error"),console.error("Clipboard copy failed:",e)})}),e.querySelector(".download-btn").addEventListener("click",()=>{const e=new Blob([summaryText],{type:"text/plain;charset=utf-8"}),t=document.createElement("a");t.href=URL.createObjectURL(e),t.download=filename,document.body.appendChild(t),t.click(),document.body.removeChild(t),URL.revokeObjectURL(t.href)})};
    const showApiKeyModal = () => {
        const overlay = document.createElement('div');
        overlay.className = 'gemini-modal-overlay settings-modal';
        const currentKey = localStorage.getItem(API_KEY_STORAGE_NAME) || '';

        overlay.innerHTML = `
            <div class="gemini-modal-content" style="max-width: 500px;">
                <div class="gemini-modal-header"><h2>API Key Settings</h2><button class="gemini-modal-close">×</button></div>
                <div class="gemini-modal-body">
                    <div class="settings-section">
                        <label for="apiKey">Gemini API Key</label>
                        <input type="text" id="apiKey" value="${currentKey}" placeholder="Enter your key here">
                        <p style="font-size:12px; color:#666; margin-top:8px;">Your key is stored securely in your browser's local storage.</p>
                    </div>
                </div>
                <div class="gemini-modal-footer">
                    <button class="gemini-modal-button primary" id="save-key">Save Key</button>
                </div>
            </div>
        `;
        document.body.appendChild(overlay);
        const closeModal = () => overlay.remove();
        overlay.querySelector('.gemini-modal-close').addEventListener('click', closeModal);
        overlay.querySelector('#save-key').addEventListener('click', () => {
            const newKey = overlay.querySelector('#apiKey').value.trim();
            if (newKey) {
                localStorage.setItem(API_KEY_STORAGE_NAME, newKey);
                showToast('API Key saved successfully!');
                closeModal();
            } else {
                localStorage.removeItem(API_KEY_STORAGE_NAME);
                showToast('API Key cleared.', 'error');
                closeModal();
            }
        });
    };
    
    // --- CORE LOGIC & NEW ON-DEMAND OPTIONS MODAL ---
    const showExecutionOptionsModal = (geminiButton) => {
        const overlay = document.createElement('div');
        overlay.className = 'gemini-modal-overlay options-modal';

        const sectionsHtml = Object.keys(PROMPT_SECTIONS).map(key => {
            const label = key.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
            return `<label><input type="checkbox" name="section" value="${key}" checked>${label}</label>`;
        }).join('');

        const today = new Date().toISOString().split('T')[0];

        overlay.innerHTML = `
            <div class="gemini-modal-content">
                <div class="gemini-modal-header"><h2>Generate Summary Options</h2><button class="gemini-modal-close">×</button></div>
                <div class="gemini-modal-body">
                    <div class="settings-section">
                        <h3>Date Filter</h3>
                        <div class="date-filters">
                            <button class="gemini-modal-button" id="date-today">Today</button>
                            <button class="gemini-modal-button" id="date-yesterday">Yesterday</button>
                        </div>
                        <label for="startDate">Start Date</label><input type="date" id="startDate" value="${today}">
                        <label for="endDate">End Date</label><input type="date" id="endDate" value="${today}">
                    </div>
                    <div class="settings-section">
                        <h3>Output Sections</h3>
                        <div class="sections-grid">${sectionsHtml}</div>
                    </div>
                </div>
                <div class="gemini-modal-footer">
                    <button class="gemini-modal-button" id="cancel-run">Cancel</button>
                    <button class="gemini-modal-button primary" id="generate-summary">Generate Summary</button>
                </div>
            </div>
        `;
        document.body.appendChild(overlay);

        const closeModal = () => overlay.remove();
        overlay.querySelector('.gemini-modal-close').addEventListener('click', closeModal);
        overlay.querySelector('#cancel-run').addEventListener('click', closeModal);
        
        const startDateInput = overlay.querySelector('#startDate');
        const endDateInput = overlay.querySelector('#endDate');

        overlay.querySelector('#date-today').addEventListener('click', () => {
            const todayStr = new Date().toISOString().split('T')[0];
            startDateInput.value = todayStr;
            endDateInput.value = todayStr;
        });

        overlay.querySelector('#date-yesterday').addEventListener('click', () => {
            const yesterdayStr = new Date(Date.now() - 86400000).toISOString().split('T')[0];
            startDateInput.value = yesterdayStr;
            endDateInput.value = yesterdayStr;
        });

        overlay.querySelector('#generate-summary').addEventListener('click', () => {
            const transientSettings = {
                customStartDate: startDateInput.value,
                customEndDate: endDateInput.value,
                selectedSections: Array.from(overlay.querySelectorAll('input[name="section"]:checked')).map(el => el.value)
            };
            closeModal();
            runSummaryProcess(geminiButton, transientSettings);
        });
    };

    const getAuthToken = () => { /* ... (Logic unchanged) ... */ return new Promise((e,t)=>{let n=null;const o=window.fetch,s=XMLHttpRequest.prototype.setRequestHeader;window.fetch=function(...e){const t=e[1]?.headers;return t&&(t.Authorization||t.authorization)&&(n=t.Authorization||t.authorization),o.apply(this,e)};XMLHttpRequest.prototype.setRequestHeader=function(e,t){return"authorization"===e.toLowerCase()&&(n=t),s.apply(this,arguments)};const i=()=>{window.fetch=o,XMLHttpRequest.prototype.setRequestHeader=s};let r=0;const l=setInterval(()=>{n?(clearInterval(l),i(),e(n)):r++>150&&(clearInterval(l),i(),t(new Error("Auth token timeout. Please refresh and try again.")))},100)})};
    const generateUsefulFilename = (conversationId) => { /* ... (Logic unchanged) ... */ const e=new Date,t=e=>e.toString().padStart(2,"0"),n=`${e.getFullYear()}-${t(e.getMonth()+1)}-${t(e.getDate())}_${t(e.getHours())}-${t(e.getMinutes())}`;let o=document.querySelector('[data-test-id="conversation-header-title"]');return o=o&&o.textContent.trim()?o.textContent.trim().replace(/[^\w\s-]/g,"").trim().replace(/\s+/g,"-"):conversationId,`${n}_${o}_OpenPhone_Summary.txt`};
    const filterActivitiesByDate = (activities, settings) => { /* ... (Logic unchanged, uses settings object) ... */ let e,t;const n=new Date(settings.customStartDate),o=new Date(settings.customEndDate);return o.setHours(23,59,59,999),activities.filter(s=>{const i=new Date(s.createdAt);return i>=n&&i<o})};
    const buildDynamicPrompt = (settings) => { /* ... (Logic unchanged, uses settings object) ... */ let e="";return settings.selectedSections.forEach(t=>{PROMPT_SECTIONS[t]&&(e+=PROMPT_SECTIONS[t]+"\n")}),BASE_PROMPT_HEADER+e+BASE_PROMPT_FOOTER};

    const runSummaryProcess = async (buttonElement, settings) => {
        buttonElement.innerHTML = loadingSpinnerSVG;
        buttonElement.disabled = true;
        buttonElement.title = "Processing...";
        
        const apiKey = localStorage.getItem(API_KEY_STORAGE_NAME);
        if (!apiKey) {
            showToast("API Key not set. Please set it in Settings (gear icon).", 'error');
            buttonElement.innerHTML = geminiIconSVG; buttonElement.disabled = false; buttonElement.title = "Get Gemini Summary";
            return;
        }

        try {
            const authToken = await getAuthToken();
            const currentUrl = window.location.href;
            const conversationId = currentUrl.split('/').pop() || currentUrl.split('/').slice(-2)[0];
            if (!conversationId || !conversationId.startsWith('CN')) throw new Error(`Invalid Conversation ID: "${conversationId}"`);
            
            const openPhoneApiUrl = `https://communication.openphoneapi.com/v2/activity?id=${conversationId}&last=200`;
            const apiResponse = await fetch(openPhoneApiUrl, { headers: { 'Authorization': authToken } });
            if (!apiResponse.ok) throw new Error(`OpenPhone API request failed: ${apiResponse.status}`);
            const openPhoneData = await apiResponse.json();
            
            const filteredActivities = filterActivitiesByDate(openPhoneData.result, settings);
            const dynamicPrompt = buildDynamicPrompt(settings);
            const filteredOpenPhoneData = { ...openPhoneData, result: filteredActivities };

            if (filteredActivities.length === 0) {
                showToast("No activities found in the selected date range.", 'error');
                buttonElement.innerHTML = geminiIconSVG; buttonElement.disabled = false; buttonElement.title = "Get Gemini Summary";
                return;
            }

            const imageParts = [];
            const textPart = { text: dynamicPrompt + JSON.stringify(filteredOpenPhoneData, null, 2) };
            const imageActivities = filteredActivities.filter(activity => activity.media?.some(m => m.type.startsWith('image/')));

            if (imageActivities.length > 0) { /* ... (Image fetching logic unchanged) ... */ showToast(`Found ${imageActivities.length} image(s). Fetching...`);const e=async t=>{try{const e=await fetch(t.url);if(!e.ok)throw new Error(`Failed to fetch image: ${e.statusText}`);const n=await e.blob();return new Promise((e,o)=>{const s=new FileReader;s.onloadend=()=>{const t=s.result.split(",")[1];e({inlineData:{mimeType:n.type,data:t}})},s.onerror=o,s.readAsDataURL(n)})}catch(e){return console.error(`Skipping image ${t.url} due to error:`,e),null}};const t=imageActivities.flatMap(t=>t.media.map(e));const n=await Promise.all(t);imageParts.push(...n.filter(e=>null!==e))}

            const geminiApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;
            const geminiPayload = { contents: [{ parts: [textPart, ...imageParts] }] };
            
            showToast("Sending data to Gemini...");
            const geminiFetchResponse = await fetch(geminiApiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(geminiPayload) });
            if (!geminiFetchResponse.ok) throw new Error(`Gemini API request failed: ${await geminiFetchResponse.text()}`);
            const geminiResponse = await geminiFetchResponse.json();
            
            const geminiResponseText = geminiResponse.candidates?.[0]?.content?.parts?.[0]?.text;
            if (!geminiResponseText) throw new Error("Gemini response was empty or in an unexpected format.");
            
            const finalFilename = generateUsefulFilename(conversationId);
            showSummaryModal(geminiResponseText, finalFilename);

        } catch (error) {
            console.error("❌ An error occurred:", error);
            showToast(error.message, 'error');
        } finally {
            buttonElement.innerHTML = geminiIconSVG;
            buttonElement.disabled = false;
            buttonElement.title = "Get Gemini Summary";
        }
    };
    
    const createAndInjectButtons = () => {
        const targetContainer = document.getElementById('message-quick-actions');
        if (!targetContainer) return;
        const templateButton = targetContainer.querySelector('button');
        if (!templateButton) return;

        document.getElementById('gemini-quick-action-button')?.remove();
        document.getElementById('gemini-settings-button')?.remove();

        const geminiButton = templateButton.cloneNode(true);
        geminiButton.id = 'gemini-quick-action-button';
        geminiButton.innerHTML = geminiIconSVG;
        geminiButton.title = "Get Gemini Summary";
        geminiButton.removeAttribute('aria-labelledby');
        geminiButton.addEventListener('click', () => showExecutionOptionsModal(geminiButton));
        
        const settingsButton = templateButton.cloneNode(true);
        settingsButton.id = 'gemini-settings-button';
        settingsButton.innerHTML = settingsIconSVG;
        settingsButton.title = "API Key Settings";
        settingsButton.removeAttribute('aria-labelledby');
        settingsButton.addEventListener('click', showApiKeyModal);
        
        targetContainer.prepend(settingsButton);
        targetContainer.prepend(geminiButton);
        console.log("✅ Gemini Summarizer Pro buttons successfully added.");
    };
    
    injectStyles();
    createAndInjectButtons();
})();
